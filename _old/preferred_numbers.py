#!/usr/bin/env python3
"""Preferred numbers module"""
import math
import bisect
from decimal import *

ROUNDSTYLE='linear' # or 'logarithmic'
USEDECIMAL=False    # or True
ROUNDHALF='even'    # Default rounding mode, Only applicable if USEDECIMAL,
                    # Round to even is used otherwise. Options are:
                    # from_zero  rounds away from zero
                    # to_zero    rounds towards zero
                    # even       rounds to the nearest even digit
_RHOPT = {'from_zero': ROUND_HALF_UP,
          'to_zero':   ROUND_HALF_DOWN,
          'even':      ROUND_HALF_EVEN}


_pref = {"R3":    ['1'   , '2'   , '5'   ],
         "R5":    ['1.0' , '1.6' , '2.5' , '4.0' , '6.3' ],
         "R''5":  ['1.0' , '1.5' , '2.5' , '4.0' , '6.0' ],
         "R10":   ['1.00', '1.25', '1.60', '2.00', '2.50', '3.15', '4.00', '5.00', '6.30', '8.00'],
         "R'10":  ['1.00', '1.25', '1.60', '2.00', '2.50', '3.20', '4.00', '5.00', '6.30', '8.00'],
         "R''10": ['1.0' , '1.2' , '1.5' , '2.0' , '2.5' , '3.0' , '4.0' , '5.0' , '6.0' , '8.0' ],
         "R20":   ['1.00', '1.12', '1.25', '1.40', '1.60', '1.80', '2.00', '2.24', '2.50', '2.80',
                   '3.15', '3.55', '4.00', '4.50', '5.00', '5.60', '6.30', '7.10', '8.00', '9.00'],
         "R'20":  ['1.00', '1.12', '1.25', '1.40', '1.60', '1.80', '2.00', '2.20', '2.50', '2.80',
                   '3.20', '3.60', '4.00', '4.50', '5.00', '5.60', '6.30', '7.10', '8.00', '9.00'],
         "R''20": ['1.0' , '1.1' , '1.2' , '1.4' , '1.6' , '1.8' , '2.0' , '2.2' , '2.5' , '2.8' ,
                   '3.0' , '3.5' , '4.0' , '4.5' , '5.0' , '5.5' , '6.0' , '7.0' , '8.0' , '9.0' ],
         "R40":   ['1.00', '1.06', '1.12', '1.18', '1.25', '1.32', '1.40', '1.50', '1.60', '1.70',
                   '1.80', '1.90', '2.00', '2.12', '2.24', '2.36', '2.50', '2.65', '2.80', '3.00',
                   '3.15', '3.35', '3.55', '3.75', '4.00', '4.25', '4.50', '4.75', '5.00', '5.30',
                   '5.60', '6.00', '6.30', '6.70', '7.10', '7.50', '8.00', '8.50', '9.00', '9.50'],
         "R'40":  ['1.00', '1.05', '1.12', '1.20', '1.25', '1.30', '1.40', '1.50', '1.60', '1.70',
                   '1.80', '1.90', '2.00', '2.10', '2.20', '2.40', '2.50', '2.60', '2.80', '3.00',
                   '3.20', '3.40', '3.60', '3.80', '4.00', '4.20', '4.50', '4.80', '5.00', '5.30',
                   '5.60', '6.00', '6.30', '6.70', '7.10', '7.50', '8.00', '8.50', '9.00', '9.50'],
         "R80":   ['1.00', '1.03', '1.06', '1.09', '1.12', '1.15', '1.18', '1.22', '1.25', '1.28',
                   '1.32', '1.36', '1.40', '1.45', '1.50', '1.55', '1.60', '1.65', '1.70', '1.75',
                   '1.80', '1.85', '1.90', '1.95', '2.00', '2.06', '2.12', '2.18', '2.24', '2.30',
                   '2.36', '2.43', '2.50', '2.58', '2.65', '2.72', '2.80', '2.90', '3.00', '3.07',
                   '3.15', '3.25', '3.35', '3.45', '3.55', '3.65', '3.75', '3.87', '4.00', '4.12',
                   '4.25', '4.37', '4.50', '4.62', '4.75', '4.87', '5.00', '5.15', '5.30', '5.45',
                   '5.60', '5.75', '6.00', '6.15', '6.30', '6.50', '6.70', '6.90', '7.10', '7.30',
                   '7.50', '7.75', '8.00', '8.25', '8.50', '8.75', '9.00', '9.25', '9.50', '9.75'],
         "E6":    ['1.0' , '1.5' , '2.2' , '3.3' , '4.7' , '6.8'],
         "E12":   ['1.0' , '1.2' , '1.5' , '1.8' , '2.2' , '2.7' , '3.3' , '3.9' , '4.7' , '5.6' , '6.8' , '8.2' ],
         "E24":   ['1.0' , '1.2' , '1.5' , '1.8' , '2.2' , '2.7' , '3.3' , '3.9' , '4.7' , '5.6' , '6.8' , '8.2' ,
                   '1.1' , '1.3' , '1.6' , '2.0' , '2.4' , '3.0' , '3.6' , '4.3' , '5.1' , '6.2' , '7.5' , '9.1' ],
         "E48":   ['1.00', '1.21', '1.47', '1.78', '2.15', '2.61', '3.16', '3.83', '4.64', '5.62', '6.81', '8.25',
                   '1.05', '1.27', '1.54', '1.87', '2.26', '2.74', '3.32', '4.02', '4.87', '5.90', '7.15', '8.66',
                   '1.10', '1.33', '1.62', '1.96', '2.37', '2.87', '3.48', '4.22', '5.11', '6.19', '7.50', '9.09',
                   '1.15', '1.40', '1.69', '2.05', '2.49', '3.01', '3.65', '4.42', '5.36', '6.49', '7.87', '9.53'],
         "E96":   ['1.00', '1.21', '1.47', '1.78', '2.15', '2.61', '3.16', '3.83', '4.64', '5.62', '6.81', '8.25',
                   '1.02', '1.24', '1.50', '1.82', '2.21', '2.67', '3.24', '3.92', '4.75', '5.76', '6.98', '8.45',
                   '1.05', '1.27', '1.54', '1.87', '2.26', '2.74', '3.32', '4.02', '4.87', '5.90', '7.15', '8.66',
                   '1.07', '1.30', '1.58', '1.91', '2.32', '2.80', '3.40', '4.12', '4.99', '6.04', '7.32', '8.87',
                   '1.10', '1.33', '1.62', '1.96', '2.37', '2.87', '3.48', '4.22', '5.11', '6.19', '7.50', '9.09',
                   '1.13', '1.37', '1.65', '2.00', '2.43', '2.94', '3.57', '4.32', '5.23', '6.34', '7.68', '9.31',
                   '1.15', '1.40', '1.69', '2.05', '2.49', '3.01', '3.65', '4.42', '5.36', '6.49', '7.87', '9.53',
                   '1.18', '1.43', '1.74', '2.10', '2.55', '3.09', '3.74', '4.53', '5.49', '6.65', '8.06', '9.76'],
         "E192":  ['1.00', '1.21', '1.47', '1.78', '2.15', '2.61', '3.16', '3.83', '4.64', '5.62', '6.81', '8.25',
                   '1.01', '1.23', '1.49', '1.80', '2.18', '2.64', '3.20', '3.88', '4.70', '5.69', '6.90', '8.35',
                   '1.02', '1.24', '1.50', '1.82', '2.21', '2.67', '3.24', '3.92', '4.75', '5.76', '6.98', '8.45',
                   '1.04', '1.26', '1.52', '1.84', '2.23', '2.71', '3.28', '3.97', '4.81', '5.83', '7.06', '8.56',
                   '1.05', '1.27', '1.54', '1.87', '2.26', '2.74', '3.32', '4.02', '4.87', '5.90', '7.15', '8.66',
                   '1.06', '1.29', '1.56', '1.89', '2.29', '2.77', '3.36', '4.07', '4.93', '5.97', '7.23', '8.76',
                   '1.07', '1.30', '1.58', '1.91', '2.32', '2.80', '3.40', '4.12', '4.99', '6.04', '7.32', '8.87',
                   '1.09', '1.32', '1.60', '1.93', '2.34', '2.84', '3.44', '4.17', '5.05', '6.12', '7.41', '8.98',
                   '1.10', '1.33', '1.62', '1.96', '2.37', '2.87', '3.48', '4.22', '5.11', '6.19', '7.50', '9.09',
                   '1.11', '1.35', '1.64', '1.98', '2.40', '2.91', '3.52', '4.27', '5.17', '6.26', '7.59', '9.20',
                   '1.13', '1.37', '1.65', '2.00', '2.43', '2.94', '3.57', '4.32', '5.23', '6.34', '7.68', '9.31',
                   '1.14', '1.38', '1.67', '2.03', '2.46', '2.98', '3.61', '4.37', '5.30', '6.42', '7.77', '9.42',
                   '1.15', '1.40', '1.69', '2.05', '2.49', '3.01', '3.65', '4.42', '5.36', '6.49', '7.87', '9.53',
                   '1.17', '1.42', '1.72', '2.08', '2.52', '3.05', '3.70', '4.48', '5.42', '6.57', '7.96', '9.65',
                   '1.18', '1.43', '1.74', '2.10', '2.55', '3.09', '3.74', '4.53', '5.49', '6.65', '8.06', '9.76',
                   '1.20', '1.45', '1.76', '2.13', '2.58', '3.12', '3.79', '4.59', '5.56', '6.73', '8.16', '9.88']}

class Num:
  def __init__(self, value, series, roundhalf='even', roundstyle='logarithmic'):
    """Initialization function, sets up the basic variables, and calls calculate()"""
    self.value = value
    self.series = series
    self._roundhalf = roundhalf
    self._roundstyle = roundstyle
    self.calculate()
  def calculate(self):
    if isinstance(self.value, Decimal):
      self._numlist = [Decimal(x) for x in _pref[self.series]]
      self.power = math.floor(self.value.log10())
      self.normalized = self.value / (10**self.power)
    else:
      try:
        self._numlist = [int(x) for x in _pref[self.series]]
      except ValueError:
        self._numlist = [float(x) for x in _pref[self.series]]
      self.power = math.floor(math.log10(self.value))
      self.normalized = self.value / (10**self.power)
    # 
    # !!!!!!!
    # Still need to implement differences between halfway rounding patterns here.
    # !!!!!!!
    # 
    if isinstance(self.value, Decimal):
      if self._roundhalf=='up': pass
      if self._roundhalf=='down': pass
      if self._roundhalf=='to_zero': pass
      if self._roundhalf=='from_zero': pass
      if self._roundhalf=='even': pass
    self.number_id = number_id(self.normalized, self._numlist, roundstyle=self._roundstyle)
    self.number = self._numlist[self.number_id]*10**self.power
    if isinstance(self.value, Decimal):
      pass

def find_lt(a, x):
    'Find rightmost value less than x'
    i = bisect.bisect_left(a, x)
    if i:
        return i-1, a[i-1]
    raise ValueError

def number_id(value, series, roundstyle='log'):
  if value in series:
    return series.index(value)
  elif roundstyle.startswith('lin'):
    low_id, low = find_lt(series, value)
    if low_id == len(series):
      high = series[0]*10
    else:
      high = series[low_id+1]
    a = (high-low)/1
    b = low-low_id*a
    if isinstance(value, Decimal):
      return int(((value-b)/a).to_integral())
    else:
      return round((value-b)/a)
  elif roundstyle.startswith('log'):
    logbase = 10**(1/len(series))
    if isinstance(value, Decimal):
      return int((value.ln() / Decimal(math.log(logbase))).to_integral())
    else:
      return round(math.log2(value) / math.log2(logbase))
  else:
    raise(ValueError('Illegal value provided for \'roundstyle\' variable.'))

